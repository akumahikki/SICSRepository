.TH "EMEstimation" 3 "Tue Sep 23 2014" "Version 1.00" "SICS IRT" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EMEstimation \- Classical estimation through the EM algorithm, generic for the models however must be called with specific model object, the optimization algorithm can be any from the optimizers class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <EMEstimation\&.h>\fP
.PP
Inherits \fBClassicalEstimation\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEMEstimation\fP ()"
.br
.ti -1c
.RI "virtual \fB~EMEstimation\fP ()"
.br
.ti -1c
.RI "void \fBestimate\fP ()"
.br
.RI "\fIMain loop of the EM estimation orchestrates the parameters for the estimation, and holds the estimation for the iterations\&. \fP"
.ti -1c
.RI "void \fBstepE\fP ()"
.br
.RI "\fIStep E of the EM method, this step takes the actual estimation of the parameters, and produces a f and a r matrices used in the maximization step\&. \fP"
.ti -1c
.RI "void \fBstepM\fP ()"
.br
.RI "\fIExecutes the maximization step using the inputted or default optimizer currently only supporting BFGS and newton algorithms TODO : Relax Convergence criterias\&. \fP"
.ti -1c
.RI "void \fBsetModel\fP (\fBModel\fP *\fBmodel\fP)"
.br
.RI "\fISets the model to be estimated, currently only supports 3PL model\&. \fP"
.ti -1c
.RI "void \fBcheckRunningConditions\fP ()"
.br
.RI "\fICheck if all the conditions are met for running the model, can report an error to a logger\&. \fP"
.ti -1c
.RI "void \fBsetOptimizationAlgorithm\fP (string algorithm)"
.br
.RI "\fISets the optimization algorithm\&. \fP"
.ti -1c
.RI "void \fBsetTrace\fP (string filename)"
.br
.RI "\fISets the reporter for the trace\&. \fP"
.ti -1c
.RI "void \fBsetTrace\fP (\fBTrace\fP trace)"
.br
.ti -1c
.RI "void \fBsetInitialValues\fP (map< \fBParameter\fP, \fBMatrix\fP< double > * > parameterSet)"
.br
.RI "\fISets the initial values for the estimation, use this for inputting a matrix as initial values\&. \fP"
.ti -1c
.RI "void \fBsetInitialValues\fP (string method)"
.br
.RI "\fISets the initial values according to a method of calculating the values Possible methods : ANDRADE, OSPINA, RANDOM,\&. \fP"
.ti -1c
.RI "int \fBgetIterations\fP () const "
.br
.RI "\fIReturns the iterations that took the estimation to obtain an answer\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBMatrix\fP< double > * \fBf\fP"
.br
.ti -1c
.RI "\fBMatrix\fP< double > * \fBr\fP"
.br
.ti -1c
.RI "\fBTrace\fP * \fBlogger\fP"
.br
.ti -1c
.RI "\fBModel\fP * \fBmodel\fP"
.br
.ti -1c
.RI "\fBOptimizer\fP * \fBoptim\fP"
.br
.ti -1c
.RI "bool \fBconvergenceSignal\fP"
.br
.ti -1c
.RI "int \fBiterations\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Classical estimation through the EM algorithm, generic for the models however must be called with specific model object, the optimization algorithm can be any from the optimizers class\&. 

EM is a iterative \fBEstimation\fP Maximization algorithm, please check the literature on how it works\&. EM estimation requires a quadrature for the implementation of the integrals in the expectation step this quadratures can be obtained from R, or using the supplied ones from the SICS binary quadratures ranging from 1 quadrature node to 101 quadrature nodes\&. 
.PP
Definition at line 25 of file EMEstimation\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "EMEstimation::EMEstimation ()"

.PP
Definition at line 10 of file EMEstimation\&.cpp\&.
.PP
References convergenceSignal, f, iterations, logger, model, optim, and r\&.
.SS "EMEstimation::~EMEstimation ()\fC [virtual]\fP"

.PP
Definition at line 22 of file EMEstimation\&.cpp\&.
.PP
References f, logger, optim, and r\&.
.SH "Member Function Documentation"
.PP 
.SS "void EMEstimation::checkRunningConditions ()"

.PP
Check if all the conditions are met for running the model, can report an error to a logger\&. 
.PP
Definition at line 443 of file EMEstimation\&.cpp\&.
.SS "void EMEstimation::estimate ()\fC [virtual]\fP"

.PP
Main loop of the EM estimation orchestrates the parameters for the estimation, and holds the estimation for the iterations\&. TODO : read maxiterations as a input parameter , idea : calculate the max iterations depending on the items TODO : \fBOutput\fP last estimation onto the json for recovery in the program\&. 
.PP
Implements \fBClassicalEstimation\fP\&.
.PP
Definition at line 394 of file EMEstimation\&.cpp\&.
.PP
References a, c, convergenceSignal, ItemModel::countItems(), d, Model::getItemModel(), Model::getParameterModel(), ParameterModel::getParameterSet(), iterations, model, stepE(), and stepM()\&.
.PP
Referenced by oneRun()\&.
.SS "int EMEstimation::getIterations () const"

.PP
Returns the iterations that took the estimation to obtain an answer\&. 
.PP
Definition at line 458 of file EMEstimation\&.cpp\&.
.PP
References iterations\&.
.SS "void EMEstimation::setInitialValues (map< \fBParameter\fP, \fBMatrix\fP< double > * > parameterSet)"

.PP
Sets the initial values for the estimation, use this for inputting a matrix as initial values\&. 
.PP
Definition at line 53 of file EMEstimation\&.cpp\&.
.PP
References Model::getParameterModel(), model, and ParameterModel::setParameterSet()\&.
.SS "void EMEstimation::setInitialValues (string method)"

.PP
Sets the initial values according to a method of calculating the values Possible methods : ANDRADE, OSPINA, RANDOM,\&. The default method is OSPINA , this is the fastest method according to the SICS calculations 
.PP
Definition at line 66 of file EMEstimation\&.cpp\&.
.SS "void EMEstimation::setModel (\fBModel\fP * model)\fC [virtual]\fP"

.PP
Sets the model to be estimated, currently only supports 3PL model\&. 
.PP
Implements \fBClassicalEstimation\fP\&.
.PP
Definition at line 39 of file EMEstimation\&.cpp\&.
.PP
References ItemModel::countItems(), f, Model::getDimensionModel(), Model::getItemModel(), DimensionModel::getLatentTraitSet(), LatentTraitSet::getTheta(), model, Matrix< T >::nC(), and r\&.
.PP
Referenced by oneRun()\&.
.SS "void EMEstimation::setOptimizationAlgorithm (string algorithm)"

.PP
Sets the optimization algorithm\&. 
.PP
Definition at line 447 of file EMEstimation\&.cpp\&.
.SS "void EMEstimation::setTrace (string filename)"

.PP
Sets the reporter for the trace\&. 
.PP
Definition at line 451 of file EMEstimation\&.cpp\&.
.SS "void EMEstimation::setTrace (\fBTrace\fP trace)"

.PP
Definition at line 454 of file EMEstimation\&.cpp\&.
.SS "void EMEstimation::stepE ()"

.PP
Step E of the EM method, this step takes the actual estimation of the parameters, and produces a f and a r matrices used in the maximization step\&. TODO : PARALLELIZABLE FOR 
.PP
Definition at line 84 of file EMEstimation\&.cpp\&.
.PP
References a, c, PatternMatrix::checkEnd(), PatternMatrix::countItems(), d, f, PatternMatrix::getCurrentBitSet(), PatternMatrix::getCurrentFrequency(), ItemModel::getDataset(), Model::getDimensionModel(), Model::getItemModel(), DimensionModel::getLatentTraitSet(), Model::getParameterModel(), ParameterModel::getParameterSet(), ParameterModel::getProbability(), LatentTraitSet::getTheta(), LatentTraitSet::getWeight(), PatternMatrix::iterate(), model, Matrix< T >::nC(), r, Matrix< T >::reset(), PatternMatrix::resetIterator(), and Model::successProbability()\&.
.PP
Referenced by estimate()\&.
.SS "void EMEstimation::stepM ()"

.PP
Executes the maximization step using the inputted or default optimizer currently only supporting BFGS and newton algorithms TODO : Relax Convergence criterias\&. 
.PP
Definition at line 182 of file EMEstimation\&.cpp\&.
.PP
References a, c, convergenceSignal, DataSet::countItems(), d, ItemModel::getDataset(), Model::getDimensionModel(), Model::getItemModel(), DimensionModel::getLatentTraitSet(), Model::getParameterModel(), ParameterModel::getParameterSet(), LatentTraitSet::getTheta(), ThreePLModel::gradient(), ThreePLModel::Hessian(), ThreePLModel::itemgradient(), ThreePLModel::itemHessian(), ThreePLModel::logLikelihood(), model, Matrix< T >::nC(), optim, Optimizer::searchOptimal(), and ParameterModel::setParameterSet()\&.
.PP
Referenced by estimate()\&.
.SH "Member Data Documentation"
.PP 
.SS "bool EMEstimation::convergenceSignal\fC [private]\fP"

.PP
Definition at line 72 of file EMEstimation\&.h\&.
.PP
Referenced by EMEstimation(), estimate(), and stepM()\&.
.SS "\fBMatrix\fP<double>* EMEstimation::f\fC [private]\fP"

.PP
Definition at line 63 of file EMEstimation\&.h\&.
.PP
Referenced by EMEstimation(), setModel(), stepE(), and ~EMEstimation()\&.
.SS "int EMEstimation::iterations\fC [private]\fP"

.PP
Definition at line 74 of file EMEstimation\&.h\&.
.PP
Referenced by EMEstimation(), estimate(), and getIterations()\&.
.SS "\fBTrace\fP* EMEstimation::logger\fC [private]\fP"

.PP
Definition at line 66 of file EMEstimation\&.h\&.
.PP
Referenced by EMEstimation(), and ~EMEstimation()\&.
.SS "\fBModel\fP* EMEstimation::model\fC [private]\fP"

.PP
Definition at line 68 of file EMEstimation\&.h\&.
.PP
Referenced by EMEstimation(), estimate(), setInitialValues(), setModel(), stepE(), and stepM()\&.
.SS "\fBOptimizer\fP* EMEstimation::optim\fC [private]\fP"

.PP
Definition at line 70 of file EMEstimation\&.h\&.
.PP
Referenced by EMEstimation(), stepM(), and ~EMEstimation()\&.
.SS "\fBMatrix\fP<double>* EMEstimation::r\fC [private]\fP"

.PP
Definition at line 64 of file EMEstimation\&.h\&.
.PP
Referenced by EMEstimation(), setModel(), stepE(), and ~EMEstimation()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SICS IRT from the source code\&.
